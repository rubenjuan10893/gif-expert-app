{"version":3,"sources":["components/AddCategory.jsx","functions/getGifs.js","components/GifGridItem.jsx","components/GifGrid.jsx","hooks/useFetchGifs.js","GifExpertApp.jsx","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setinputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","categoria","a","console","log","url","encodeURI","fetch","respuesta","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","setTimeout","useFetchGifs","imagenes","GifExpertApp","categorias","setCategorias","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEVC,mBAAS,IAFC,mBAEvCC,EAFuC,KAE3BC,EAF2B,KAkB9C,OACI,sBAAMC,SAXW,SAACC,GAClBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACtCN,EAAc,MAMlB,SACI,uBACIO,KAAK,OACLC,MAAQT,EACRU,SAnBc,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,a,+BCRlBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACnBC,QAAQC,IAAIH,GACNI,EAFa,iDAEoCC,UAAUL,GAF9C,+DAGKM,MAAMF,GAHX,cAGbG,EAHa,gBAKIA,EAAUC,OALd,uBAKXC,EALW,EAKXA,KAEFC,EAAOD,EAAKE,KAAI,SAACC,GACnB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAKQ,EAAIG,OAAOC,iBAAiBZ,QAXtB,kBAeZM,GAfY,4CAAH,sDCEPO,EAAc,SAAC,GAAuB,EAArBJ,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IACrC,OACI,sBAAKc,UAAU,yCAAf,UACI,qBAAKC,IAAMf,EAAMgB,IAAMN,IACvB,6BAAMA,QCFLO,EAAU,SAAC,GAAmB,IAAjBrB,EAAgB,EAAhBA,UAAgB,ECDd,SAAEA,GAAgB,IAAD,EACfd,mBAAS,CAC/BuB,KAAM,GACNa,SAAS,IAH4B,mBAClCC,EADkC,KAC3BC,EAD2B,KAkBzC,OAZAC,qBAAW,WACP1B,EAASC,GACJ0B,MAAM,SAAAC,GACHC,YAAY,WACRJ,EAAS,CACLf,KAAMkB,EACNL,SAAS,MAEd,UAEZ,CAAEtB,IAEEuB,EDf2BM,CAAa7B,GAAlC8B,EAFyB,EAE9BrB,KAAea,EAFe,EAEfA,QAEvB,OACI,eAAC,WAAD,WACI,6BAAMtB,IAEJsB,GAAW,mBAAGJ,UAAU,mCAAb,yBAEb,qBAAKA,UAAU,YAAf,SAEQY,EAASnB,KAAK,SAAAC,GAAG,OACb,cAAC,EAAD,eAESA,GADCA,EAAIC,aEdzBkB,EAAe,WAAM,MAGM7C,mBAAS,CAAC,iBAHhB,mBAGvB8C,EAHuB,KAGXC,EAHW,KAU9B,OACI,qCACI,8CACA,cAAC,EAAD,CAAahD,cAAgBgD,IAC7B,uBAEA,6BAEQD,EAAWrB,KAAI,SAACX,GAAD,OACX,cAAC,EAAD,CAA2BA,UAAYA,GAAxBA,Y,YCjBvCkC,IAASC,OAAO,cAAC,EAAD,IAAkBC,SAASC,eAAe,W","file":"static/js/main.4d528af4.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nexport const AddCategory = ({ setCategories }) => {\n\n    const [inputValue, setinputValue] = useState('');\n\n    const handleInputChange = (e) => {\n        setinputValue(e.target.value);\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n\n        if (inputValue.trim().length > 2) {\n            setCategories(cats => [inputValue, ...cats]);\n            setinputValue('');\n        }\n\n    }\n\n    return (\n        <form onSubmit={ handleSubmit }>\n            <input \n                type=\"text\"\n                value={ inputValue }\n                onChange={ handleInputChange }\n            />\n        </form>\n    )\n}\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}\n","export const getGifs = async (categoria) => {\n    console.log(categoria);\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(categoria) }&limit=10&api_key=dyIWxO6JHYwyFUtlgtq52C66dQz6Y2fa`;\n    const respuesta = await fetch(url);\n\n    const { data } = await respuesta.json();\n\n    const gifs = data.map((img) => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images.downsized_medium.url\n        };\n    });\n\n    return gifs;\n}","import React from 'react'\n\nexport const GifGridItem = ( {id, title, url} ) => {\n    return (\n        <div className=\"card animate__animated animate__fadeIn\">\n            <img src={ url } alt={ title }></img>\n            <h5>{ title }</h5>\n        </div>\n    )\n}\n","import React, { Fragment } from 'react';\nimport { useFetchGifs } from '../hooks/useFetchGifs';\nimport { GifGridItem } from './GifGridItem';\n\nexport const GifGrid = ({ categoria }) => {\n\n    const { data:imagenes, loading} = useFetchGifs(categoria);\n\n    return (\n        <Fragment>\n            <h3>{ categoria }</h3>\n\n            { loading && <p className=\"animate__animated animate__flash\">Cargando...</p> }\n\n            <div className=\"card-grid\">\n                {\n                    imagenes.map( img => (\n                        <GifGridItem\n                            key={ img.id }\n                            { ...img }\n                        />\n                    ))\n                }\n            </div>\n        </Fragment>\n    )\n}\n        ","import { useEffect, useState } from \"react\";\nimport { getGifs } from \"../functions/getGifs\";\n\nexport const useFetchGifs = ( categoria ) => {\n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    });\n\n    useEffect( () => {\n        getGifs( categoria )\n            .then( imgs => {\n                setTimeout( () => {\n                    setState({\n                        data: imgs,\n                        loading: false\n                    })\n                }, 3000);\n            });\n    }, [ categoria ]);\n\n    return state;\n}","import React, { Fragment, useState } from 'react';\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\nexport const GifExpertApp = () => {\n    //const categorias = ;\n\n    const [categorias, setCategorias] = useState(['Rick & Morty']);\n\n    // const handleAdd = () => {\n    //     //setCategorias(cats => [...cats, 'Opcion 1 de agregar categorias']);\n    //     setCategorias([...categorias, 'Opcion 2 de agregar categorias'])\n    // }\n\n    return (\n        <>\n            <h2>GifExpertApp</h2>\n            <AddCategory setCategories={ setCategorias }/>\n            <hr />\n\n            <ol>\n                {\n                    categorias.map((categoria) => (\n                        <GifGrid key={ categoria } categoria={ categoria } />\n                    ))\n                }\n            </ol>\n        </>\n    );\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp'\nimport './index.css';\nimport 'animate.css';\n\nReactDOM.render(<GifExpertApp />, document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}